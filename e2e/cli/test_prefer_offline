#!/usr/bin/env bash
# Test that commands with PREFER_OFFLINE don't make network requests
# This tests various backend types to ensure they all respect PREFER_OFFLINE

set -euo pipefail

# Helper function to assert no HTTP calls were made
assert_no_http_calls() {
	local command="$1"
	local output="$2"

	if echo "$output" | grep -q -E "(GET|POST|PUT|DELETE|HEAD) http"; then
		echo "ERROR: '$command' made HTTP requests when it shouldn't"
		echo "HTTP requests found:"
		echo "$output" | grep -E "(GET|POST|PUT|DELETE|HEAD) http"
		exit 1
	fi

	echo "SUCCESS: '$command' does not make network calls"
}

# Create a test directory with tools from various backends that need resolution
cat <<EOF >.tool-versions
core:node 20
core:python 3.11
core:ruby 3.2
cargo:ripgrep@latest
npm:prettier@3
go:github.com/junegunn/fzf@latest
EOF

# Test 1: Verify hook-env doesn't make network calls
# PREFER_OFFLINE is automatically set for hook-env
# Use MISE_LOG_HTTP to catch any HTTP requests
output=$(MISE_LOG_HTTP=1 mise hook-env -s bash 2>&1)
assert_no_http_calls "hook-env" "$output"

# Test 2: Verify 'mise ls' with various backends doesn't make network calls
# Test with 'mise ls' which has PREFER_OFFLINE set
output=$(MISE_LOG_HTTP=1 mise ls 2>&1)
assert_no_http_calls "mise ls" "$output"

# Test 3: Verify 'mise env' also doesn't make network calls
output=$(MISE_LOG_HTTP=1 mise env 2>&1)
assert_no_http_calls "mise env" "$output"

# Test 4: Verify that version resolution in ls command respects PREFER_OFFLINE
# ls command with PREFER_OFFLINE should not make network calls for version resolution
# Clear cache first
mise cache clear

# Create a config that requires version resolution
echo 'tiny@latest' >.tool-versions
output=$(MISE_LOG_HTTP=1 mise ls 2>&1)
assert_no_http_calls "mise ls with version resolution" "$output"

# Test 5: Test MISE_PREFER_OFFLINE environment variable with different scenarios
# Use commands that don't have PREFER_OFFLINE by default but need version resolution

# 5a: Test with cache - should not make HTTP calls
echo "Testing MISE_PREFER_OFFLINE=1 with cache..."
# First populate cache with a normal command
mise cache clear
echo 'tiny@latest' >.tool-versions
output=$(MISE_LOG_HTTP=1 mise ls 2>&1) # This will populate cache
# Now test a command that normally doesn't have PREFER_OFFLINE
output=$(MISE_LOG_HTTP=1 MISE_PREFER_OFFLINE=1 mise bin-paths 2>&1)
assert_no_http_calls "MISE_PREFER_OFFLINE=1 mise bin-paths (with cache)" "$output"

# 5b: Test without cache - should still not make HTTP calls
echo "Testing MISE_PREFER_OFFLINE=1 without cache..."
mise cache clear
echo 'core:node@20' >.tool-versions
output=$(MISE_LOG_HTTP=1 MISE_PREFER_OFFLINE=1 mise bin-paths 2>&1)
assert_no_http_calls "MISE_PREFER_OFFLINE=1 mise bin-paths (no cache)" "$output"

# Test 6: Verify commands automatically get PREFER_OFFLINE
echo "Testing automatic PREFER_OFFLINE for 'mise current'..."
mise cache clear
output=$(MISE_LOG_HTTP=1 mise current 2>&1)
assert_no_http_calls "mise current (auto PREFER_OFFLINE)" "$output"

# Test 7: Test ls-remote command with and without PREFER_OFFLINE
echo "Testing ls-remote command behavior..."

# 7a: ls-remote without PREFER_OFFLINE (should potentially make HTTP calls)
mise cache clear
echo "Testing ls-remote without PREFER_OFFLINE (may make HTTP calls)..."
output=$(MISE_LOG_HTTP=1 mise ls-remote tiny 2>&1)
echo "ls-remote completed (HTTP calls allowed)"

# 7b: ls-remote with PREFER_OFFLINE (should not make HTTP calls)
echo "Testing ls-remote with MISE_PREFER_OFFLINE=1..."
output=$(MISE_LOG_HTTP=1 MISE_PREFER_OFFLINE=1 mise ls-remote tiny 2>&1)
assert_no_http_calls "MISE_PREFER_OFFLINE=1 mise ls-remote" "$output"

# Test 8: Verify exec/x can still work when needed (optional test)
echo "Testing exec command (optional - may use cached version)..."
# Try to run exec with a simple tool that might already be cached
# We don't strictly verify HTTP calls here since exec should be allowed to fetch if needed
if mise x tiny@3.1.0 -- tiny --version 2>&1 | grep -q "tiny"; then
	echo "SUCCESS: exec command works"
else
	echo "INFO: exec test skipped or using cached version"
fi

echo "SUCCESS: All PREFER_OFFLINE tests completed"
