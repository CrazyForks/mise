#!/usr/bin/env bash
# Test sub version arithmetic behavior in different network modes
# This ensures that sub-1:latest and similar patterns work correctly
# when offline, prefer-offline, or online

set -euo pipefail

# Helper function to get resolved version from current
get_resolved_version() {
	local tool="$1"
	# Use 'mise current' which shows the resolved version for the current directory
	# For tools that aren't installed, current just returns the tool name and version on one line
	mise current "$tool" 2>/dev/null | awk '{print $NF}'
}

# Test 1: sub with explicit version in offline mode (whole number)
echo "=== Test 1: sub with explicit version in offline mode (whole number) ==="
cat <<EOF >.tool-versions
tiny sub-1:3.2.0
EOF

output=$(MISE_OFFLINE=1 get_resolved_version tiny)
# Should be "2" or a more specific 2.x.x if available
if [[ $output =~ ^2(\..*)?$ ]]; then
	echo "✓ SUCCESS: sub-1:3.2.0 → $output"
else
	echo "✗ ERROR: Expected 2 or 2.x.x but got: $output"
	exit 1
fi

# Test 2: sub with different arithmetic values (decimal)
echo -e "\n=== Test 2: Different sub arithmetic values (decimal) ==="
cat <<EOF >.tool-versions
tiny sub-0.1:3.2.1
EOF

output=$(MISE_OFFLINE=1 get_resolved_version tiny)
# sub-0.1:3.2.1 should give us 3.1 (not 3.1.1)
if [[ $output =~ ^3\.1(\..*)?$ ]]; then
	echo "✓ SUCCESS: sub-0.1:3.2.1 → $output"
else
	echo "✗ ERROR: Expected 3.1 or 3.1.x but got: $output"
	exit 1
fi

# Test 3: sub with 'latest' and installed versions (prefer offline)
echo -e "\n=== Test 3: sub with 'latest' and installed versions ==="
# Ensure we have some tiny versions installed
mise install tiny@3.0.0 tiny@3.1.0 2>/dev/null || true

cat <<EOF >.tool-versions
tiny sub-1:latest
EOF

# In prefer offline mode, should use highest installed version
output=$(MISE_PREFER_OFFLINE=1 get_resolved_version tiny)
# Should get 2.x.x or just "2"
if [[ $output =~ ^2(\..*)?$ ]]; then
	echo "✓ SUCCESS: sub-1:latest uses installed version (got $output)"
else
	echo "ℹ INFO: Got $output (may have fetched latest online)"
fi

# Test 4: sub with 'latest' and NO installed versions in offline mode
echo -e "\n=== Test 4: sub with 'latest' and no installed versions (offline) ==="
# Use a tool that likely has no installed versions
cat <<EOF >.tool-versions
erlang sub-1:latest
EOF

# Should error in offline mode
output=$(MISE_OFFLINE=1 mise ls erlang 2>&1) || true
if echo "$output" | grep -q -E "(Cannot resolve|Cannot perform version arithmetic|offline|no installed versions)"; then
	echo "✓ SUCCESS: Properly errors when can't resolve 'latest' offline"
else
	echo "ℹ INFO: Output: $output"
fi

# Test 5: sub with 'latest' in prefer-offline with no installed versions
echo -e "\n=== Test 5: sub with 'latest' in prefer-offline (should make network call) ==="
# Use tiny since it's small and fast to fetch
cat <<EOF >.tool-versions
tiny sub-1:latest
EOF

# Clear cache to potentially trigger network call
mise cache clear >/dev/null 2>&1 || true

# This should make a network call despite prefer-offline if no versions installed
output=$(MISE_LOG_HTTP=1 MISE_PREFER_OFFLINE=1 mise current tiny 2>&1)
# Extract the version from the 'mise current' output (last field of the line containing 'tiny')
resolved=$(echo "$output" | grep -E "^tiny " | awk '{print $NF}' || true)
if echo "$output" | grep -q -E "(GET|POST) http"; then
	echo "✓ SUCCESS: Made network call for version arithmetic despite prefer-offline"
	echo "  Resolved to: $resolved"
elif [[ -n $resolved ]]; then
	echo "ℹ INFO: Got result (may have used cache): $resolved"
else
	echo "ℹ INFO: Test 5 skipped (output format different than expected)"
fi

# Test 6: Verify error message is helpful
echo -e "\n=== Test 6: Verify helpful error message ==="
# Use a tool with no installed versions
cat <<EOF >.tool-versions
zig sub-1:latest
EOF

output=$(MISE_OFFLINE=1 mise ls zig 2>&1) || true
if echo "$output" | grep -q -E "(go online|install a specific version|use an exact version)"; then
	echo "✓ SUCCESS: Error message provides helpful suggestions"
else
	echo "ℹ INFO: Error message could be more helpful"
fi

# Test 7: sub with multiple tools
echo -e "\n=== Test 7: Multiple tools with sub arithmetic ==="
# Create separate test files for each tool version to test independently
echo "tiny sub-2:4.5.0" >.tool-versions
tiny1_version=$(MISE_OFFLINE=1 get_resolved_version tiny)

echo "tiny sub-0.1:3.2.0" >.tool-versions
tiny2_version=$(MISE_OFFLINE=1 get_resolved_version tiny)

# tiny sub-2:4.5.0 should give us "2" or 2.x.x
# tiny sub-0.1:3.2.0 should give us "3.1" or 3.1.x
if [[ $tiny1_version =~ ^2(\..*)?$ ]] && [[ $tiny2_version =~ ^3\.1(\..*)?$ ]]; then
	echo "✓ SUCCESS: Multiple tools resolved correctly"
	echo "  tiny: sub-2:4.5.0 = $tiny1_version"
	echo "  tiny: sub-0.1:3.2.0 = $tiny2_version"
else
	echo "✗ ERROR: Multiple tool resolution failed"
	echo "  Expected: tiny@2 or 2.x.x, tiny@3.1 or 3.1.x"
	echo "  Got: sub-2:4.5.0=$tiny1_version, sub-0.1:3.2.0=$tiny2_version"
	exit 1
fi

echo -e "\n✅ All sub version arithmetic tests completed successfully!"
